% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Rsolo.R
\name{checkFiles}
\alias{checkFiles}
\alias{Rsolo}
\title{Checks whether all specified files are valid R or Python files}
\usage{
checkFiles(
  files,
  index = seq_along(files),
  path = NULL,
  open = openFile,
  mode = c("parse", "run", "exist"),
  ...
)

Rsolo(
  files,
  index = seq_along(files),
  path = NULL,
  open = openFile,
  mode = c("parse", "run", "exist"),
  ...
)
}
\arguments{
\item{files}{character: file name(s)}

\item{index}{integer(s):  if \code{length(index)==1} the files from \code{index} to \code{length(files)} are checked (default: \code{seq_along(files)}) otherwise the files with values in \code{index} are checked.}

\item{path}{character: path to start from (default: \code{getwd()})}

\item{open}{function: function or function name to call after an error occurs (default: \code{openFile})}

\item{mode}{character which check to do}

\item{...}{further parameters given to the function in \code{open}}
}
\value{
nothing
}
\description{
\code{checkFiles} verifies whether all specified files are valid source files
that can be executed independently of each other. If an error occurs, the following actions are taken:
\enumerate{
\item If \code{open} is either a function name or a function with a \code{file} parameter, then \code{checkFiles}
will attempt to open the faulty source file; otherwise, it will not.
\item The execution of \code{checkFiles} is stopped.
}

If you do not want the faulty source file to be opened immediately, use \code{open=0}.

Three modes are available for checking a \code{file}:
\enumerate{
\item \code{exist}: Does the source file exist?
\item \code{parse}: (default) Is \code{parse(file)} (in R) or \verb{python -m py_compile "file"} (in Python) successful?
\item \code{run}: Is \verb{Rscript "file"} (in R) or \code{reticulate::py_run_file(file)} (in Python) successful?
}

If source files have side effects, e.g., generating an image or producing other outputs,
and \code{mode == "parse"}, these side effects will occur during the check.
To prevent a script from being executed during the check, add a \verb{## Not check:} comment at the top of the script.
}
\examples{
if (interactive()) {
  files <- list.files(pattern="*.(R|py)$", full.names=TRUE, recursive=TRUE)
  checkFiles(files)
}
}
